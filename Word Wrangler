#http://www.codeskulptor.org/#user41_cGGB6dI8S5OGfwo.py
"""
Student code for Word Wrangler game
"""
import time
import math
import urllib2
import codeskulptor
import poc_wrangler_provided as provided
codeskulptor.set_timeout(60)

WORDFILE = "assets_scrabble_words3.txt"

# Functions to manipulate ordered word lists
def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.
    Returns a new sorted list with the same elements in list1, but
    with no duplicates.
    This function can be iterative.
    """
    ans = []
    last_item = None
    app=ans.append
    for item in list1:
        if item != last_item:
            app(item)
            last_item = item
    return ans

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.
    Returns a new sorted list containing only elements that are in
    both list1 and list2.
    This function can be iterative.
    """
    len1, len2 = len(list1), len(list2)
    if len1 == 0 or len2 == 0:
        return []
    if len2 * math.log(len1,2) > len1:
        return _intersect1(list1, list2, len1, len2)
    else:
        return _intersect2(list1, list2, len1)

def _intersect1(list1, list2, len1, len2):
    """
    helper function for intersect, linear part
    """
    idx1, idx2, idx3 = 0, 0, 0
    ans = [None] * len1 if len1 < len2 else [None] * len2
    while idx1 < len1 and idx2 < len2:
        if list1[idx1] == list2[idx2]:
            ans[idx3] = list1[idx1]
            idx1 = -(~idx1)
            idx2 = -(~idx2)
            idx3 = -(~idx3)
        elif list1[idx1] < list2[idx2]:
            idx1 = -(~idx1)
        else:
            idx2 = -(~idx2)
    return [item for item in ans if item != None]

def _intersect2(list1, list2, len1):
    """
    helper function for intersect, binary search part
    """
    ans = []
    app = ans.append
    for item in list2:
        if _iter_binary_search(list1, 0, len1, item):
            app( item )
    return ans

def _iter_binary_search(ordered_list, lower, upper, item):
    """
    Iterative version of binary search
    Test whether item is in ordered_list[lower:upper]
    """
    while lower + 1 < upper:
        mid = (lower + upper) / 2
        if item < ordered_list[mid]:
            upper = mid
        else:
            lower = mid
    return item == ordered_list[lower]

# Functions to perform merge sort
def merge(list1, list2):
    """
    Merge two sorted lists.
    Returns a new sorted list containing all of the elements that
    are in either list1 and list2.
    This function can be iterative.
    """
    idx1, idx2, idx3 = 0, 0, 0
    len1, len2 = len(list1), len(list2)
    len3 = len1 + len2
    result = [None] * len3

    while True:
        if idx1 >= len1:
            result[idx3:]=list2[idx2:]
            return result
        if idx2 >= len2:
            result[idx3:]=list1[idx1:]
            return result
        if list1[idx1] <= list2[idx2]:
            result[idx3]=list1[idx1]
            idx1 = -(~idx1)
            idx3 = -(~idx3)
        else:
            result[idx3]=list2[idx2]
            idx2 = -(~idx2)
            idx3 = -(~idx3)

def merge_sort(list1):
    """
    Sort the elements of list1.
    Return a new sorted list with the same elements as list1.
    This function should be recursive.
    """
    len1 = len(list1)
    if len1 <= 16:
        return shell_sort(list1)
    return merge(merge_sort(list1[:len1/2]), merge_sort(list1[len1/2:]))

def shell_sort(list1):
    """
    shell sort not in-place
    """
    list2 = list1[:]
    len2 = len(list2)
    gap = len2 // 2
    while gap > 0:
        for idx1 in range(gap, len2):
            tmp = list2[idx1]
            idx2 = idx1
            while idx2 >= gap and list2[idx2 - gap] > tmp:
                list2[idx2] = list2[idx2 - gap]
                idx2 -= gap
            list2[idx2] = tmp
        gap //= 2
    return list2

# Function to generate all strings for the word wrangler game
def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.
    Returns a list of all strings that can be formed from the letters
    in word.
    This function should be recursive.
    """
    if word == '':
        return ['']
    first, rest = word[0], word[1:]
    return gen_all_strings(rest) + [string[:idx] + first + string[idx:] for string \
                                    in gen_all_strings(rest) for idx in xrange(len(string)+1)]


# Function to load words from a file
def load_words(filename):
    """
    Load word list from the file named filename.
    Returns a list of strings.
    """
    url = codeskulptor.file2url(filename)
    netfile = urllib2.urlopen(url)
    return [word[:-1] for word in netfile]

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
run()


#words = load_words(WORDFILE)
#wrangler = provided.WordWrangler(words, remove_duplicates, 
#                                 intersect, merge_sort, 
#                                 gen_all_strings)
#words2 = load_words(WORDFILE)
#words.reverse()


#start = time.time()
#wrangler.start_game('pythonic')
#print time.time() - start

#start = time.time()
#intersect(words, words2)
#print time.time() - start

#start = time.time()
#merge_sort(words)
#print time.time() - start
